{"ast":null,"code":"var _jsxFileName = \"/Users/adamkile/Desktop/Programming/budget/budget_frontend/src/components/AccountBalance/AccountPending.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport useBalance from '../../Hooks/useBalance.js';\nimport './AccountBalance.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AccountPending = props => {\n  _s();\n\n  const address = 'sumPending';\n  const [balance, balanceColor] = useBalance(props.account_id, props.host, address, props.submit); // const [pendingBalance, setPendingBalance] = useState(0)\n  // const [pendingColor, setPendingColor] = useState('black')\n  // useEffect(() => {\n  // \tif (props.account_id) {\n  // \t\ttry {\n  // \t\t\tfetch(`${props.host}sumPending`, {\n  // \t\t\t\tmethod: 'post',\n  // \t\t\t\theaders: {'Content-Type': 'application/json'},\n  // \t\t\t\tbody: JSON.stringify({\n  // \t\t\t\t  \"account_id\": props.account_id\n  // \t\t\t\t})\n  // \t\t\t})\n  // \t\t\t\t.then(response => response.json())\n  // \t\t      \t.then(data => setPendingBalance(data[0].sum));\n  // \t\t} catch (error) {\n  // \t\t\tconsole.error(error)\n  // \t\t} \t\t\n  // \t\tif (pendingBalance < 0) {\n  // \t\t\tsetPendingColor('red') \n  // \t\t}else {setPendingColor('black')}\n  // \t}\n  // },[props.account_id, pendingBalance, props.host, props.submit])\t\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: pendingColor,\n    children: [`$ ${(Math.round(pendingBalance) * 100 / 100).toFixed(2)}`, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AccountPending, \"9FFbrqdnCWcisW4na+0Kn2XXCoE=\", false, function () {\n  return [useBalance];\n});\n\n_c = AccountPending;\nexport default AccountPending;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountPending\");","map":{"version":3,"sources":["/Users/adamkile/Desktop/Programming/budget/budget_frontend/src/components/AccountBalance/AccountPending.js"],"names":["React","useState","useEffect","useBalance","AccountPending","props","address","balance","balanceColor","account_id","host","submit","pendingColor","Math","round","pendingBalance","toFixed"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAO,sBAAP;;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAAA;;AACjC,QAAMC,OAAO,GAAG,YAAhB;AACA,QAAM,CAACC,OAAD,EAAUC,YAAV,IAA0BL,UAAU,CACzCE,KAAK,CAACI,UADmC,EACvBJ,KAAK,CAACK,IADiB,EACXJ,OADW,EACFD,KAAK,CAACM,MADJ,CAA1C,CAFiC,CAIjC;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAEA,sBACG;AAAG,IAAA,SAAS,EAAEC,YAAd;AAAA,eAA8B,KAAI,CAAEC,IAAI,CAACC,KAAL,CAAWC,cAAX,IAA6B,GAA9B,GAAqC,GAAtC,EAA2CC,OAA3C,CAAmD,CAAnD,CAAsD,EAAxF;AAAA;AAAA;AAAA;AAAA;AAAA,UADH;AAGA,CAlCD;;GAAMZ,c;UAE2BD,U;;;KAF3BC,c;AAoCN,eAAeA,cAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport useBalance from '../../Hooks/useBalance.js';\nimport './AccountBalance.css'\n\nconst AccountPending = (props) => {\n\tconst address = 'sumPending';\n\tconst [balance, balanceColor] = useBalance(\n\t\tprops.account_id, props.host, address, props.submit);\n\t// const [pendingBalance, setPendingBalance] = useState(0)\n\t// const [pendingColor, setPendingColor] = useState('black')\n\t\n\t// useEffect(() => {\n\t// \tif (props.account_id) {\n\t// \t\ttry {\n\t// \t\t\tfetch(`${props.host}sumPending`, {\n\t// \t\t\t\tmethod: 'post',\n\t// \t\t\t\theaders: {'Content-Type': 'application/json'},\n\t// \t\t\t\tbody: JSON.stringify({\n\t// \t\t\t\t  \"account_id\": props.account_id\n\t// \t\t\t\t})\n\t// \t\t\t})\n\t// \t\t\t\t.then(response => response.json())\n\t// \t\t      \t.then(data => setPendingBalance(data[0].sum));\n\n\t// \t\t} catch (error) {\n\t// \t\t\tconsole.error(error)\n\t// \t\t} \t\t\n\n\t// \t\tif (pendingBalance < 0) {\n\t// \t\t\tsetPendingColor('red') \n\t// \t\t}else {setPendingColor('black')}\n\t// \t}\n\n\t// },[props.account_id, pendingBalance, props.host, props.submit])\t\n\n\treturn (\n\t  \t<p className={pendingColor}>{`$ ${((Math.round(pendingBalance) * 100) / 100).toFixed(2)}`} </p>\n\t);\n}\n\nexport default AccountPending;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}